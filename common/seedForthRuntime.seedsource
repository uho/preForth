\ seedForth interactive system
\ this file has routines needed to interpret or compile textual forth source

\ Defining words
Definer Create ( <name> -- )      create ( x ) drop ;
Definer Variable ( <name> -- )    create ( x ) drop 0 , ;
\ the following is defined in seedForthRuntimeXXbit.seedsource
\ Definer Constant ( x <name> -- )  create ( x ) >r , r> does> @ ;

Macro Literal
   seed lit
   seed [
   seed ,
   seed ]
end-macro

\ Missing primitives
: over ( x1 x2 -- x1 x2 x1 )  
    >r dup r> swap ;

: rot ( a b c -- b c a )  
    >r swap r> swap ;

: -rot ( a b c -- c a b )
    swap >r swap r> ;

: under+ ( x1 x2 x3 -- x1+x3 x2 )  
    rot + swap ;

: tuck ( x1 x2 -- x2 x1 x2 )  
    swap over ;

: /string ( x1 x2 x3 -- x4 x5 )   
    swap over - >r + r> ;

: 2drop ( x1 x2 -- )  
    drop drop ;

: 2dup ( x1 x2 -- x1 x2 x1 x2 )  
    over over ;

: 2swap ( x1 x2 x3 x4 -- x3 x4 x1 x2 )
    >r -rot r> -rot ;

: 2over ( x1 x2 x3 x4 -- x1 x2 x3 x4 x1 x2 )
   >r >r 2dup r> r> 2swap ;

: 1+ ( x1 -- x2 )  
    1 + ;

: 2+ ( x1 -- x2 )  
    2 + ;
    
: 1- ( x1 -- x2 )  
    1 - ;

: invert ( x1 x2 -- x3 )
    negate 1- ;

: nip ( x1 x2 -- x2 ) 
    swap drop ;

: count ( addr -- c-addr u )  
    dup 1+ swap c@ ;

: xor ( x1 x2 -- x3 ) 
    2dup or >r  invert swap invert or r> and ;

: u< ( u1 u2 -- f )
   2dup xor 0< IF   nip 0< exit THEN - 0< ;

: < ( n1 n2 -- f )
   2dup xor 0< IF  drop 0< exit THEN - 0< ;

: > ( n1 n2 -- f )  
    swap < ;

: = ( x1 x2 -- f )  
    - 0= ;

: 0<> ( x -- f ) 
    0= 0= ;

: 2* ( x1 -- x2 )   \ already in kernel
    dup + ;

: cell+ ( addr1 -- addr2 ) 
    1 cells + ;

: cell- ( addr1 -- addr2 )
    -1 cells + ;

: 2@ ( addr -- x1 x2 ) 
    dup cell+ @ swap @ ;

: 2! ( x1 x2 addr -- ) 
    swap over ! cell+ ! ;

Definer Field ( offset size <name> -- offset' ) 
    create >r over , + r> does> @ + ;

\ output
32 Constant bl

: cr ( -- ) 
    10 emit 13 emit ;

: type ( c-addr u -- )
    BEGIN dup WHILE  over c@ emit  1  /string  REPEAT  2drop ;

: space ( -- ) 
    bl emit ;

: spaces ( n -- )
    BEGIN ?dup WHILE space 1 - REPEAT ;

Macro ." ( ccc" -- )
   seed s"
   seed type
end-macro

: .digit ( n -- )  
    '0' + emit ;

: third ( x1 x2 x3 -- x1 x2 x3 x1 )
    >r over r> swap ;

: min ( n1 n2 -- n3 )
    2dup > IF swap THEN drop ;

: max ( n1 n2 -- n3 )
    2dup < IF swap THEN drop ;

: r@ ( -- x )  
    r> r> dup >r swap >r ;

: abs ( n -- +n )
    dup 0< IF negate THEN ;

: cmove ( c-addr1 c-addr2 u -- )
    BEGIN
      ?dup
    WHILE
      >r
      over c@ over c!
      1+ swap 1+ swap
      r> 1-
    REPEAT
    2drop ;

: move cmove ;

: place ( c-addr1 u c-addr2 -- )
    2dup >r >r 1+ swap cmove  r> r> c! ;

\ Exception handling 

Variable frame ( -- addr ) 

: catch ( i*x xt -- j*x 0 | i*x err )
    frame @ >r  sp@ >r  rp@  frame !  execute    
    r> drop r> frame ! 0 ;

: throw ( i*x 0 | i*x err -- j*x err )
    ?dup 0= ?exit  frame @ rp!  r> swap >r  sp! drop  
    r> r> frame ! ;

\ save and empty

Create savearea 0 , 0 ,  \ { hp | dp }

: (save) ( -- )
    here  hp @  savearea 2! ;

Macro save ( -- )
  seed (save)
  save-#tokens
end-macro

: (empty) ( -- )
    savearea 2@  hp !  here - allot ( aka dp! ) ; 

Macro empty ( -- )
  seed (empty)
  restore-#tokens
end-macro

\ Tester 
: empty-stack ( i*x -- )
    BEGIN depth 0< WHILE  0    REPEAT
    BEGIN depth    WHILE  drop REPEAT ;

Variable actual-depth  ( actual-results )  20 cells allot

: nth-result ( n -- addr )
   cells actual-depth + ;

: error ( i*x c-addr u -- )
   cr  type empty-stack ;

: t{ ( i*x -- )
   '.'  emit empty-stack ;

: -> ( -- )
   depth actual-depth !
   BEGIN depth WHILE  depth nth-result !  REPEAT ;

: }t ( i*x -- )
   depth actual-depth @ - IF  s" wrong number of results" error  exit THEN
   BEGIN depth WHILE  depth nth-result @ - IF  s" incorrect result" error  exit THEN  REPEAT ;

Macro begin-tests 
   seed save
end-macro

Macro end-tests
   seed empty
end-macro

: skip ( c-addr1 u1 c -- c-addr2 u2 )
   BEGIN
     over
   WHILE
     >r over c@ r> swap over =
   WHILE
     >r  1 /string  r> 
   REPEAT THEN drop ;

: scan ( c-addr u1 c -- c-addr2 u2 )
   BEGIN
     over
   WHILE
     >r over c@ r> swap over -
   WHILE
     >r  1 /string  r>
   REPEAT THEN drop ;

: (u. ( u1 -- )
    ?dup IF 0 10 um/mod (u. .digit THEN ;

\ display unsigned number
: u. ( u -- )
    dup (u. 0= IF '0' emit THEN space ;

\ display signed number
: . ( n -- )
    dup 0< IF '-' emit negate THEN u. ;

: .s ( i*x -- i*x )  
    depth 0= ?exit  >r .s r> dup . ;


\ Deferred words

: ' ( --  x )  token h@ ;

: uninitialized ( -- ) 
     cr s" uninitialized execution vector" type -1 throw ;

Definer Defer ( <name> -- ) 
   create >r [ ' uninitialized ] Literal , r> does> @ execute ;

\ String comparison
: compare ( c-addr1 u1 c-addr2 u2 -- n )
    rot 
    BEGIN \ ( c-addr1 c-addr2 u2 u1 )
      over 
    WHILE \ ( c-addr1 c-addr2 u2 u1 )
      dup
    WHILE \ ( c-addr1 c-addr2 u2 u1 )
      >r >r  over c@ over c@ - ?dup IF 0< 2* 1+ ( -1 | 1 ) nip nip r> drop r> drop exit THEN
      1+ swap 1+ swap
      r> 1- r> 1-
    REPEAT \ ( c-addr1 c-addr2 u2>0 0 )
      -1 
    ELSE   \ ( c-addr1 c-addr2 0 u1 )
      dup 0= IF 0  ELSE 1  THEN
    THEN >r 2drop 2drop r> ;


\ dynamic memory
\ -------------------------------------
Variable anchor

50 Constant waste

minint  Constant #free  \ sign bit
maxint  Constant #max

: size ( mem -- size ) 1 cells - @ #max and ;

: addr&size ( mem -- mem size ) dup size ;

: above ( mem -- >mem )   addr&size + 2 cells + ;

: use ( mem size -- )
    dup >r swap  2dup 1 cells - !  r> #max and + ! ;

: release ( mem size -- )  #free or use ;

: fits? ( size -- mem | false ) >r anchor @
    BEGIN addr&size  r@ u< 0=
         IF r> drop exit THEN
         @ dup anchor @ =
    UNTIL 0= r> drop ;

: link ( mem >mem <mem -- )
    >r 2dup cell+ !  over !  r> 2dup !  swap cell+ ! ;

: @links ( mem -- <mem mem> )  dup @  swap cell+ @ ;

: setanchor ( mem -- mem ) 
    dup anchor @ = IF  dup @ anchor ! THEN ;

: unlink ( mem -- ) setanchor  @links 2dup !  swap cell+ ! ;

: allocate ( size -- mem ior )
    3 cells max dup >r  fits? ?dup 0= IF r> -8 exit THEN ( "dictionary overflow" )
    addr&size r@ -  dup waste u<
    IF  drop  dup @ over unlink  over addr&size use
    ELSE 2 cells -   over r@ use
         over above   dup rot release
         2dup swap @links link THEN
    r> drop  anchor ! 0 ;

: free ( mem -- ior )
    addr&size  over 2 cells -  @ dup 0<
    IF #max and 2 cells +  rot over - rot rot +
    ELSE  drop  over anchor @  dup cell+ @  link THEN
    2dup + cell+ dup @ dup 0<
    IF #max and swap cell+ unlink  +  2 cells +  release 0 exit THEN
    2drop release 0 ;

: resize ( mem newsize -- mem' ior )
    over swap  over size  2dup >
    IF ( mem mem size newsize )  swap allocate ?dup IF >r drop 2drop r>  exit THEN 
        dup >r swap move free r> swap exit THEN
    2drop drop ;

: empty-memory ( addr size -- )
    >r  cell+ dup anchor !   dup 2 cells use  dup 2dup link
    dup above  swap over  dup link
    dup r> 7 cells -  release  above 1 cells -  0 swap ! ;

: init ( -- )
    here 10000  ( chars ) dup allot empty-memory ;

init

: alloc ( u -- addr )
     allocate throw ;

: dispose ( addr -- )
     free throw ;


: ?memory ( -- ) anchor @ 
   cr ." ->: "  BEGIN cr dup u. ." : " addr&size u.        @ dup anchor @ = UNTIL
   cr ." <-: "  BEGIN cr dup u. ." : " addr&size u.  cell+ @ dup anchor @ = UNTIL
   drop ;

\ Some general memory allocation words

\ : alloc ( u -- addr )
\     here swap allot ;

\ : dispose ( addr -- )
\    drop ;

\ for the input stream a struct could be defined that generally handles terminal input, evaluate, file input and others.

Create tib 255 allot

Create 'source here 0 , tib ,  \ ' source is normally  ^tib #tib is set to c-addr u for evaluate
Constant #tib

Defer getkey   \ ' key is getkey (done later)

\ after loading the *.seed runtime we will need to load further runtime as
\ textual forth source before being useable, so we will default to echo off
Variable input-echo 0 input-echo !

: accept ( c-addr u1 -- u2 )
    >r
    0 BEGIN ( c-addr u2 ) ( R: u1 )
        getkey dup 10 = over 13 = or 0=
    WHILE ( c-addr u2 key )
        dup  8 = over 127 = or IF
            drop dup 0 > IF
                1-  8 emit bl emit 8 emit
            ELSE
                7 emit
            THEN
        ELSE
            \ only char write to buffer and echo if there is room
            over r@ < IF
                >r 2dup + r@ swap c! 1+ r>
                input-echo @ IF dup emit THEN
            THEN
            \ if char was EOT, quit after maybe writing to buffer
            4 = IF r> drop nip exit THEN
        THEN
    REPEAT ( c-addr u2 key r:u1 )
    drop  r> drop   nip  
    \ input-echo @ IF cr THEN
    input-echo @ IF space THEN 
;

: query ( -- )
    tib 255 accept #tib ! ;



\ Header

0
1 cells Field _link
1       Field _flags
1 cells Field _xt
0       Field _name

Constant #header


Variable last

: "header ( c-addr u -- addr )
    \ 2dup lowercase
    dup #header + 1+ alloc >r ( c-addr u r:addr )
    0 r@ _link !
    0 r@ _flags c!
    0 r@ _xt !
    r@ _name place 
    r> ;


Variable current

: link-header ( addr -- )  
    current @ @  swap _link dup last ! dup current @ ! ! ;

: @flags ( -- x )  
    last @ _flags c@ ;

: !flags ( x -- )  
    last @ _flags c! ;


Definer Header-flag ( x <name> -- )
  create >r , r> does> ( -- ) @  @flags or !flags ;

Definer Header-flag? ( x <name> -- )
  create >r , r> does> ( addr -- f ) @ swap _flags @ and 0<> ; 

128 dup Header-flag immediate  Header-flag? immediate?
 64 dup Header-flag headerless Header-flag? headerless?

: pad ( -- addr )
   here 100 + ;


: wordlist ( -- wid )  here 0 , ;

Create search-order  0 , 10 cells allot

: get-order ( -- wid0 wid1 wid2 ... widn n )
   search-order dup @ dup >r cells + r@
   BEGIN ( addr n )
      dup
   WHILE ( addr n )
      >r dup >r @ r> cell- r> 1-
   REPEAT ( wid0 wid1 wid2 ... widn addr 0 )
   2drop r> ;

: set-order ( wid0 wid1 wid2 ... widn n )
   dup search-order !
   search-order cell+ swap
   BEGIN ( wid0 wid1 ... widn addr n )
      dup
   WHILE ( wid0 wid1 ... widn addr n )
      >r  swap over !  cell+ r> 1-
   REPEAT ( addr 0 )
   2drop ;

: get-current ( -- wid )  current @ ;
: set-current ( wid -- )  current ! ;

: context ( -- addr )  search-order cell+ ;

wordlist Constant forth-wordlist 

: Forth ( -- )   get-order nip forth-wordlist swap set-order ;
: also ( -- )  get-order  over swap 1+ set-order ;
: previous ( -- )   get-order nip 1- set-order ;
: only ( -- )   forth-wordlist 1 set-order ;
: definitions ( -- )  get-order over set-current  set-order ;
\ : OnlyForth ( -- )  only Forth also definitions ;

only Forth also definitions

: .wordlist ( wid -- )
     dup forth-wordlist = IF drop ." Forth " exit THEN
     u. ;

: order ( -- )
    search-order dup cell+ swap @
    BEGIN ( addr n )
      dup
    WHILE ( addr n )
      >r dup @ .wordlist
      cell+ r> 1-
    REPEAT ( addr n )
    2drop 
    space current @ .wordlist ;

: words ( -- ) 0 >r
   context @ @  
   BEGIN ?dup WHILE dup  dup headerless? IF '|' emit THEN _name count type space @ r> 1+ >r REPEAT 
   r> space . ." words" ;

: hide ( -- )  
    last @ @  current @ ! ;

: reveal ( -- ) 
    last @    current @ ! ;

reveal

: !chars ( S addr -- addr' )
    over 0= IF nip exit THEN
    rot >r  swap 1- swap !chars
    r> over c! 1+ ;

: !str ( S addr -- )
    2dup c! 1+ !chars drop ;

Macro has-header ( <name> -- )
   seed $name 
   seed pad 
   seed !str 
   seed pad 
   seed count
   seed "header
   seed dup
   seed link-header
   seed _xt
   seed !
end-macro


' bye         has-header bye
' dup         has-header dup
' swap        has-header swap
' drop        has-header drop
' 0<          has-header 0<
' ?exit       has-header ?exit
' >r          has-header >r
' r>          has-header r>
' -           has-header -
' exit        has-header exit
' lit         has-header lit
' @           has-header @
' c@          has-header c@
' !           has-header !
' c!          has-header c!
' execute     has-header execute
' branch      has-header branch
' ?branch     has-header ?branch
' negate      has-header negate
' +           has-header +
' 0=          has-header 0=
' ?dup        has-header ?dup
' cells       has-header cells
' +!          has-header +!
' h@          has-header h@
' h,          has-header h,
' here        has-header here
' allot       has-header allot
' ,           has-header ,
' c,          has-header c,
' fun         has-header fun
' interpreter has-header interpreter
' compiler    has-header compiler
' create      has-header create
' does>       has-header does>
' cold        has-header cold
' depth       has-header depth
' ,    has-header ,
' new         has-header new
' couple      has-header couple
' and         has-header and
' or          has-header or
' catch       has-header catch
' throw       has-header throw
' sp@         has-header sp@
' sp!         has-header sp!
' rp@         has-header rp@
' rp!         has-header rp!
' $lit        has-header $lit
' num         has-header num
' um*         has-header um*
' um/mod      has-header um/mod       
' unused      has-header unused
' key?        has-header key?
\ ' token has-header token
' usleep      has-header usleep
' hp          has-header hp
' key         has-header key
' emit        has-header emit
' eemit       has-header eemit

' over        has-header over
' rot         has-header rot
' -rot        has-header -rot
' /string     has-header /string   
' type        has-header type
' 2drop       has-header 2drop      
' 2dup        has-header 2dup
' 2swap       has-header 2swap
' 2over       has-header 2over
' xor         has-header xor
' max         has-header max
' min         has-header min
' minint      has-header minint
' maxint      has-header maxint
' dispose     has-header dispose
' alloc       has-header alloc


' cr          has-header cr        
' .s          has-header .s        
' t{          has-header t{        
' ->          has-header ->        
' }t          has-header }t        

' bl          has-header bl
' space       has-header space     
' spaces      has-header spaces    

' 1+          has-header 1+
' 2+          has-header 2+        
' 1-          has-header 1-
' invert      has-header invert      
' nip         has-header nip
' u<          has-header u<     
' <           has-header <         
' >           has-header >         
' =           has-header =         
' count       has-header count     
' 2*          has-header 2*

' abs         has-header abs
' r@          has-header r@
' third       has-header third
' cmove       has-header cmove     
' cell+       has-header cell+
' cell-       has-header cell-   
' place       has-header place     
' compare     has-header compare   
' 2@          has-header 2@        
' 2!          has-header 2!        

' skip        has-header skip      
' scan        has-header scan 
' .           has-header .
' u.          has-header u.
' words       has-header words
' context     has-header context 
' immediate   has-header immediate
' reveal      has-header reveal
' hide        has-header hide
' pad         has-header pad  

' allocate    has-header allocate
' free        has-header free
' ?memory     has-header ?memory

' headerless  has-header headerless
' headerless? has-header headerless?

' set-current has-header set-current
' get-current has-header get-current
' set-order   has-header set-order
' get-order   has-header get-order
' wordlist    has-header wordlist
' only        has-header only
' also        has-header also
' previous    has-header previous
' order       has-header order
' forth-wordlist has-header forth-wordlist
' Forth       has-header Forth
' definitions has-header definitions
' only        has-header only
\ ' OnlyForth   has-header OnlyForth
' .wordlist   has-header .wordlist
' getkey      has-header getkey
' frame       has-header frame

' "header     has-header "header
' link-header has-header link-header
' _xt         has-header _xt


Macro :noname
   seed new
   seed compiler
end-macro

: compile ( -- )
   r> dup cell+ >r @ , ;


Variable >in ( -- addr )

' >in has-header >in

: source ( -- c-addr u ) 'source 2@ ;

' source has-header source

: parse ( c -- c-addr u )
   >r source >in @ /string
   2dup r> dup >r  scan
   2dup r> skip  nip source nip swap - >in !
   nip - ;

: parse-name ( -- c-addr u )
   source >in @ /string
   bl skip  2dup bl scan  source nip  2dup swap - 1+ min >in !    nip - ;

' parse        has-header parse     
' parse-name   has-header parse-name 

Variable heads -1 heads !

: | ( -- ) 1 heads ! ;

: head? ( -- f )
   heads @ dup IF  -1 heads !  -1 = exit THEN ;


: (Create) ( <name> -- )
    parse-name "header  dup link-header create  swap _xt ! reveal 
    head? ?exit headerless
;

' (Create)    has-header Create

: last-xt ( -- xt )
     last @ _xt @ ;

' last has-header last
' _xt has-header _xt
' _name has-header _name

: (Literal) ( x -- )
    lit [ ' lit , ] , , ;

' (Literal)   has-header Literal  immediate

: (s") ( ccc" -- )
    [ ' $lit ] Literal ,  
    '"' parse here over 1+ allot place ;

' (s") has-header s" immediate

: (.") ( ccc" -- )
    (s")
    [ ' type ] Literal , ;

' (.") has-header ." immediate

: dot-paren 
   ')' parse type ;

' dot-paren has-header .( immediate

: match ( c-addr1 u1 header -- f )
    _name count compare 0= ;

: find-name-in ( c-addr u link -- header|0 )
    \ >r 2dup lowercase r>
    BEGIN ( c-addr u link )
      dup
    WHILE ( c-addr u link )
      >r  2dup  r> dup >r
      match IF 2drop r> exit THEN
      r> @
    REPEAT
    nip nip ;

' find-name-in has-header find-name-in

: find-name ( c-addr u -- header|0 )
    search-order  dup cell+ swap @
    BEGIN ( c-addr u addr n )
       dup
    WHILE ( c-addr u addr n )
       >r >r
       2dup r@ @ find-name-in ?dup IF nip nip r> drop r> drop  exit THEN 
       r> cell+ r> 1-
    REPEAT ( c-addr u addr n )
    2drop 2drop 0 ;

' find-name has-header find-name

: find-xt-in ( xt wid -- header | 0 )
    BEGIN
       dup
    WHILE ( xt wid )
       2dup _xt @ = IF nip exit THEN
       _link @
    REPEAT ( xt wid )
    2drop 0 ;

: >name ( xt -- name | 0 )
    get-order over >r set-order r> find-xt-in dup IF _name THEN ;

' >name has-header >name

: find-addr-in ( xt wid -- header | 0 )
    BEGIN
       dup
    WHILE ( xt wid )
       2dup _xt @ = IF nip exit THEN
       _link @
    REPEAT ( xt wid )
    2drop 0 ;

: addr>name ( xt -- name | 0 )
    get-order over >r set-order r> find-addr-in dup IF _name THEN ;

' addr>name has-header addr>name



: Alias ( xt <name> -- )
   parse-name "header dup link-header _xt ! ;

' Alias has-header Alias 

: (postpone) ( <name> -- )
    parse-name find-name dup 0= -13 and throw
    dup immediate? IF
      _xt @ , 
    ELSE 
      [ ' lit ] Literal ,  _xt @ ,  [ ' , ] Literal , 
    THEN 
;

' (postpone) has-header postpone immediate
' immediate? has-header immediate?

: tick ( <name> -- xt )
   parse-name find-name dup IF _xt @ exit THEN -13 throw ;

' tick        has-header '

: ([']) ( <name> -- xt )
    tick  [ ' lit ] Literal ,  , ;

' ([']) has-header ['] immediate


: digit? ( c -- f )
    dup '0' < IF drop 0 exit THEN '9' > 0= ;

: ?# ( c-addr u -- x 0 0 | c-addr u )
    dup 0= ?exit
    over c@ '-' = dup >r IF  1 /string THEN 
    2dup 0 >r
    BEGIN
      dup
    WHILE
      over c@ dup digit? 0= IF drop r> drop r> drop 2drop exit THEN
      '0' - r> 10 um* drop  + >r
      1 /string
    REPEAT
    2drop 2drop r>  r> IF negate THEN 0 0 ;

: ,# ( c-addr u -- 0 0 | c-addr u )
    dup 0= ?exit
    ?# dup ?exit
    lit [ ' lit , ] , rot , ;

:  ?'x' ( c-addr u -- x 0 0 | c-addr u )
    dup 0= ?exit
    dup 3 =
    IF over c@     ''' - ?exit
       over 2 + c@ ''' - ?exit
       drop 1+ c@ 0 0 THEN ;

: ,'x' ( c-addr u -- 0 0 | c-addr u )
    dup 0= ?exit
    ?'x' dup ?exit
    lit [ ' lit , ] , rot , ;

: ?word ( c-addr1 u1 | i*x c-addr2 u2 )
   dup 0= ?exit
   2dup find-name ?dup IF 
     nip nip _xt @ execute 0 0 
   THEN
;

: (interpreters ( c-addr1 u1 | i*x c-addr2 u2 )
   ?word
   ?#
   ?'x'
   over IF space type ( '?' emit ) space -13 throw THEN 
;

: ,word ( c-addr1 u1 | i*x c-addr2 u2 )
   dup 0= ?exit
   2dup find-name ?dup
   IF 
      nip nip dup immediate? IF _xt @ execute ELSE _xt @ , THEN 0 0 
   THEN 
;

: (compilers ( c-addr u1 | i*x c-addr2 u2 )
    ,word
    ,#
    ,'x'
    over IF space type '?' emit  space -13 throw THEN 
;

Variable compilers       ' (compilers compilers !
Variable interpreters    ' (interpreters interpreters !
Variable handlers        interpreters @ handlers !

: (]) ( -- )
   compilers @ handlers ! ;

: ([)
   interpreters @ handlers ! ;

: Header ( <name> -- addr )
    parse-name "header dup link-header reveal 
    head? ?exit headerless ;

: (:) ( <name> -- )
    Header new swap _xt !  hide  (]) ;

: (;) ( -- )
   lit [ ' exit , ] ,  reveal ([) ;

' (])   has-header ] 
' ([)   has-header [  immediate 
' (;)   has-header ;  immediate
' (:)   has-header :
' |     has-header |
' heads has-header heads

: interpret ( -- )
   BEGIN ( ) 
      parse-name dup
   WHILE ( c-addr u )
      handlers @ execute 2drop  
   REPEAT 
   2drop ;

: evaluate ( c-addr u -- )
    'source 2@ >r >r  'source 2! 
    >in @ >r  0 >in !
    \ ['] interpret catch
    [ ' interpret ] Literal catch
    r> >in !
    r> r> 'source 2!  
    throw
;

' evaluate has-header evaluate

: refill ( -- f )
    'source cell+ @ tib = IF
      query 0 >in !

      \ Nick: detect EOT (only works at the start of a line)
      #tib @ IF tib c@ 4 = IF 0 #tib ! 0 exit THEN THEN

      -1 exit
    THEN
    0 ;

' refill      has-header refill

\ after loading the *.seed runtime we will need to load further runtime as
\ textual forth source before being useable, so we will default to echo off
Variable echo  0 echo !
' echo has-header echo

' input-echo has-header input-echo

\ ANSI terminal colors

: esc ( -- ) 27 emit ;               ' esc has-header esc
: bold ( -- ) esc ." [1m" ;
: normal ( -- ) esc ." [0m" ;        ' normal has-header normal
: reverse ( -- )  esc ." [7m" ;      ' reverse has-header reverse
\ : black ( -- ) esc ." [30m" ;
: red ( -- ) esc ." [31m" ;
: green ( -- ) esc ." [32m" ;
\ : yellow ( -- ) esc ." [33m" ;
: blue ( -- ) esc ." [34m" ;
\ : bright-blue ( -- ) esc ." [94m" ;
: reset-colors ( -- ) esc ." [39;49m" ;
: cyan ( -- ) esc ." [96m" ;
: page ( -- ) esc ." [2J" esc ." [H" ;

' blue has-header blue
' page has-header page

: compiling? ( -- f )
   handlers @ compilers @ = ;

' compiling? has-header compiling?

Defer .status   : noop ;  \ ' noop is .status (done later)

' noop has-header noop

' .status has-header .status

\ interactive part
: prompt ( -- )
    echo @ IF
       cr cyan bold .s normal reset-colors compiling? IF ']' ELSE '>' THEN emit space 
    THEN ;

: .ok ( -- ) 
    echo @ IF space bold green ." ok 🙂" normal reset-colors  THEN ; \ 🆗

: ?stack ( -- )
    depth 0< -4 and throw ;

: restart ( -- )
   tib 0 'source 2!
   ([)
   BEGIN
     .status  prompt
     query  0 >in !

     \ Nick: detect EOT (only works at the start of a line)
     #tib @ IF tib c@ 4 = IF bye THEN THEN

     interpret  ?stack .ok
   0 UNTIL ;

: warm ( -- )
   \ [ ' [ , ] 
   empty-stack restart ;

Create errormsg  0 , 0 ,

' errormsg has-header errormsg

: .error# ( n -- )
    dup  -1 = IF drop ." abort" exit THEN
    dup  -2 = IF drop ." error: " 
                 errormsg 2@ type 0 0 errormsg 2! exit THEN
    dup  -4 = IF drop ." stack underflow" exit THEN
    dup -13 = IF drop ." not found" exit THEN
    dup -16 = IF drop ." attempt to use zero-length string as a name" exit THEN
    dup -39 = IF drop ." unexpected end of file" exit THEN
    ." error " . ;

: .error ( n -- )
     red bold .error# normal reset-colors ."  🤔 " ;

: boot ( -- )
   BEGIN
      [ ' warm ] Literal catch ?dup IF  .error  cr THEN
   AGAIN ;

' boot has-header boot

\ at this point append either:
\ seedForthInteractive.seedsource (boot system for interactive use)
\ seedForthBoot.seedsource (boot system for running textual forth program)
