\ seedForth: less machine dependent portion

: negate ( n1 -- n2 )
   0 swap - ;

: + ( x1 x2 -- x3 )
   negate - ;

: 0= ( x -- flag )
   0 swap ?exit drop -1 ;

: ?dup ( x -- x x | 0 )
   dup 0= ?exit dup ;

: 2* ( x1 -- x2 )
   dup + ;

: cells ( x1 -- x2 )
   2* 2* ;

: +! ( x addr -- )
   swap >r  dup @ r> +  swap ! ;

: hp ( -- addr )
   lit _hp ;

: h@ ( i -- addr )
   cells lit head + @ ;

: h! ( x i -- )
   cells lit head + ! ;

: h, ( x -- )
   hp @  h!   1 hp +! ;

: here ( -- addr )
   lit dp @ ;

: allot ( n -- )
   lit dp +! ;

: , ( x -- )
   here   1 cells allot  ! ;

: c, ( c -- )
   here   1 allot c! ;

: compile, ( x -- )
   h@ , ;

\ token are in the range 0 .. 1023:
\   0, 4 ..  255 are single byte tokens
\    256 ..  511 are double byte tokens of the form 01 xx
\    511 ..  767 are double byte tokens of the form 02 xx
\    768 .. 1023 are double byte tokens of the form 03 xx
: token ( -- x )
   key dup 0= ?exit    \         0 -> single byte token
   dup 4 - 0< 0= ?exit \ not 1 2 3 -> single byte token
   key couple ;        \              double byte token

: interpreter ( -- )
   token execute   tail interpreter ;  \ executing exit  will leave this loop

: num ( -- x )
   tail interpreter ;

: ?lit ( xt -- xt | )
   dup h@ lit num - ?exit drop   \ not num token: exit i.e. normal compile action
   lit lit ,   num ,             \ generate  lit x   num call puts x on stack
   r> drop   tail compiler ;

: eot ( -- )
   bye ; \ interpretive semantics: input exhausted, automatic bye

: ?eot ( xt -- xt | )
   dup h@ lit eot - ?exit drop   \ not eot token: exit i.e. normal compile action
   r> drop ; \ compilation semantics: return to interpretive state

: compiler ( -- )
   token

   \ Nick: old way of detecting bye token directly prevented compiling it
   \ ?dup 0= ?exit
   ?eot

   ?lit
   compile, tail compiler ;

: new ( -- xt )
   hp @   here h,  lit enter , ;

: fun ( -- )
   new drop  compiler ;

: couple ( hi lo -- hilo )
    >r  2* 2* 2* 2*   2* 2* 2* 2*   r> + ;

: $lit ( -- addr u )
    r>  dup   1 +   dup >r  swap c@  dup r> + >r ;

: create ( -- xt )
   0 , \ dummy does> field
   hp @  here h, lit dovar , ;

: does> ( xt -- ) \ set code field of last defined word
    r>   swap h@  dup >r 1 cells - !   lit dodoes r> !
;

: unused ( -- u )
    lit memtop  here - ;

: cold ( -- )
   \ 's' emit 'e' dup emit emit  'd' emit 10 emit
   lit bye         h, \ 0   00  code
   0               h, \ 1   01  prefix
   0               h, \ 2   02  prefix
   0               h, \ 3   03  prefix
   lit eot         h, \ 4   04  code
   lit dup         h, \ 5   05  code
   lit swap        h, \ 6   06  code
   lit drop        h, \ 7   07  code
   lit 0<          h, \ 8   08  code
   lit ?exit       h, \ 9   09  code
   lit >r          h, \ 10  0A  code
   lit r>          h, \ 11  0B  code
   lit -           h, \ 12  0C  code
   lit exit        h, \ 13  0D  code
   lit lit         h, \ 14  0E  code
   lit @           h, \ 15  0F  code
   lit c@          h, \ 16  10  code
   lit !           h, \ 17  11  code
   lit c!          h, \ 18  12  code
   lit execute     h, \ 19  13  code
   lit branch      h, \ 20  14  code
   lit ?branch     h, \ 21  15  code
   lit negate      h, \ 22  16
   lit +           h, \ 23  17
   lit 0=          h, \ 24  18
   lit ?dup        h, \ 25  19
   lit cells       h, \ 26  1A
   lit +!          h, \ 27  1B
   lit h@          h, \ 28  1C
   lit h,          h, \ 29  1D
   lit here        h, \ 30  1E
   lit allot       h, \ 31  1F
   lit ,           h, \ 32  20
   lit c,          h, \ 33  21
   lit fun         h, \ 34  22
   lit interpreter h, \ 35  23
   lit compiler    h, \ 36  24
   lit create      h, \ 37  25
   lit does>       h, \ 38  26
   lit cold        h, \ 39  27
   lit depth       h, \ 40  28  code
   lit compile,    h, \ 41  29
   lit new         h, \ 42  2A
   lit couple      h, \ 43  2B
   lit and         h, \ 44  2C  code
   lit or          h, \ 45  2D  code
   lit sp@         h, \ 46  2E  code
   lit sp!         h, \ 47  2F  code
   lit rp@         h, \ 48  30  code
   lit rp!         h, \ 49  31  code
   lit $lit        h, \ 50  32
   lit num         h, \ 51  33
   lit um*         h, \ 52  34  code
   lit um/mod      h, \ 53  35  code
   lit unused      h, \ 54  36
   lit key?        h, \ 55  37
   lit token       h, \ 56  38
   lit usleep      h, \ 57  39  code
   lit hp          h, \ 58  40
   lit key         h, \ 59  41  code
   lit emit        h, \ 60  42  code
   lit eemit       h, \ 61  43  code
   interpreter bye ;
