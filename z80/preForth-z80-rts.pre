\ preForth runtime system - z80 (16 bit) dependent part
\ --------------------------
\
\  - registers:
\      HL, DE  general purpose
\      BC  instruction pointer
\      IX  return stack pointer
\      SP  data stack pointer

pre
;;; This is a preForth generated file using preForth-z80-backend.
;;; Only modify it, if you know what you are doing.

DATA_STACK_SIZE = 0x1000
RETURN_STACK_SIZE = 0x1000

STDIN_DATA = 0
STDOUT_DATA = 1
STDERR_DATA = 2
STDIN_STATUS = 3
STDOUT_STATUS = 4
STDERR_STATUS = 5
USLEEP_LO = 6
USLEEP_HI = 7
SYS_EXIT = 8

EXIT_SUCCESS = 0
EXIT_FAILURE = 1

	.area	text

main:	ld	ix,return_stack + RETURN_STACK_SIZE
	ld	sp,data_stack + DATA_STACK_SIZE
	ld	bc,main1
	jp	next

main1:	.dw	_cold
	.dw	_bye

;

code bye ( -- )
	ld	a,EXIT_SUCCESS
	out	(SYS_EXIT),a
;

code emit ( c -- )
	pop	hl
	ld	a,l
	out	(STDOUT_DATA),a
	jr	next
;

code eemit ( c -- )
	pop	hl
	ld	a,l
	out	(STDERR_DATA),a
	jr	next
;

code key ( -- c )
	in	a,(STDIN_DATA)
	ld	l,a
	ld	h,0
	push	hl
	jr	next
;

code dup ( x -- x x )
	pop	hl
	push	hl
	push	hl
	jr	next
;

code swap ( x y -- y x )
	pop	de
	pop	hl
	push	de
	push	hl
	jr	next
;

code drop ( x -- )
	pop	hl
	jr	next
;

code 0< ( x -- flag )
	pop	hl
	add	hl,hl
	ld	hl,0
	jr	nc,zless1
	dec	hl
zless1: push	hl
	jr	next
;

code ?exit ( f -- )
	pop	hl
	ld	a,l
	or	h
	jr	z,next
	; fall into unnest
;

code unnest ( -- )
	ld	c,(ix)
	inc	ix
	ld	b,(ix)
	inc	ix
	jr	next
;

code >r ( x -- ) ( R -- x )
	pop	hl
	dec	ix
	ld	(ix),h
	dec	ix
	ld	(ix),l
	jr	next
;

code r> ( R x -- ) ( -- x )
	ld	l,(ix)
	inc	ix
	ld	h,(ix)
	inc	ix
	push	hl
	jr	next
;

code - ( x1 x2 -- x3 )
	pop	de
	pop	hl
	or	a
	sbc	hl,de
	push	hl
	jr	next
;

\ put this in middle of the primitives to make it reachable by jr
code nest ( -- )
	dec	ix
	ld	(ix),b
	dec	ix
	ld	(ix),c
	pop	bc
next:	ld	a,(bc)
	ld	l,a
	inc	bc
	ld	a,(bc)
	ld	h,a
	inc	bc
	jp	(hl)
;

code lit ( -- )
	ld	a,(bc)
	ld	l,a
	inc	bc
	ld	a,(bc)
	ld	h,a
	inc	bc
	push	hl
	jr	next
;

\ we want the text section to be first and bss last (for linkers that output
\ sections in definition order), so it would be good to have the bss section
\ be output by the ",end" hook, but at present we cannot call "pre" from a
\ defined word, so we make do by switching to bss and then back to text again
pre
	.area	bss

return_stack:
	.ds	RETURN_STACK_SIZE
data_stack:
	.ds	DATA_STACK_SIZE

	.area	text

;
