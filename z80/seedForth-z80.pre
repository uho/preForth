\ seedForth: less machine dependent portion
\ allows us to adjust things for direct threaded vs indirect threaded

\ insert "call _dodoes" after each "does>" token
: ?does> ( xt -- xt | )
   dup lit does> - ?exit \ not does> token: exit i.e. normal compile action
   ,  205 c, lit dodoes , \ generate word of does> and instruction of call
   r> drop   tail compiler ;

: compiler ( -- )
   token h@
   ?eot
   ?lit
   ?does>
   , tail compiler ;

\ for z80 dtc implementation, compile "call _enter" before high level code
: new ( -- xt )
   here dup h,  205 c, lit enter , ;

\ for z80 dtc implementation, compile "call _dovar" before data field of new
\ word, the "_dovar" will be changed the address of "call _dodoes" if needed
: create ( -- xt )
    here dup h,  205 c, lit dovar , ;

\ for does> we do not execute the remainder of the routine, instead we pop
\ the return stack and plug the resulting number into the word being compiled,
\ so that this word will execute the remainder of the routine when invoked
\ (and note remainder of the routine has been prefixed with a "call _dodoes")
: does> ( xt -- ) \ replace "_dovar" in "call _dovar" with return stack addr
    r>  swap  1 + ! ;
