\ --------------------------
\ preForth backend for z80 (16 bit) as-z80
\ --------------------------

\ alter substitutes non-letter characters by upper case letters (to aid assemblers to deal with labels).
: replace ( c -- c d )
    'A' swap  39 case? ?exit nip
    'B' swap '\' case? ?exit nip
    'C' swap ':' case? ?exit nip
    'D' swap '.' case? ?exit nip
    'E' swap '=' case? ?exit nip
    'F' swap '[' case? ?exit nip
    'G' swap '>' case? ?exit nip
    'H' swap ']' case? ?exit nip
    'I' swap '1' case? ?exit nip
    'J' swap '2' case? ?exit nip
    'K' swap '/' case? ?exit nip
    'L' swap '<' case? ?exit nip
    'M' swap '-' case? ?exit nip
    'N' swap '#' case? ?exit nip
    'O' swap '0' case? ?exit nip
    'P' swap '+' case? ?exit nip
    'Q' swap '?' case? ?exit nip
    'R' swap '"' case? ?exit nip
    'S' swap '!' case? ?exit nip
    'T' swap '*' case? ?exit nip
    'U' swap '(' case? ?exit nip
    'V' swap '|' case? ?exit nip
    'W' swap ',' case? ?exit nip
    'X' swap '@' case? ?exit nip \ may clash with 'X' suffix for machine code
    'Y' swap ')' case? ?exit nip
    'Z' swap ';' case? ?exit nip
;

\ alter substitutes all non-letter characters by upper case letters.
: alter ( S1 -- S2 )
    '_' 1 rot ?dup 0= ?exit nip nip
    \ dup 0= ?exit
    swap >r 1- alter  r> replace  swap 1+ ;

\ ------------
\ output words
\ ------------
\ Output is done by emit.
\ We define convenience words of the form ."xxx" to output xxx (maybe tabbed)

: ."dw" ( -- )
    tab '.' emit 'd' emit 'w' emit tab ;

: ."db" ( -- )
    tab '.' emit 'd' emit 'b' emit tab ;

: ."call" ( -- )
    tab 'c' emit 'a' emit 'l' emit 'l' emit tab ;

: ."nest" ( -- )
    'n' 'e' 's' 't' 4 alter show ;

: ."unnest" ( -- )
    'u' 'n' 'n' 'e' 's' 't' 6 alter show ;

: ."lit" ( -- )
    'l' 'i' 't' 3 alter show ;

\ ------------
\ Compiling words
\ ------------

\ ,string compiles the topmost string as a sequence of numeric DB values.
: ,string ( S -- )
    ?dup 0= ?exit
    dup roll ."db" u. cr \ 1st char
    1- ,string ;

\ reproduce a verbatim line
: ,line ( x1 ...cn n -- )
    show ;

\ compile a reference to an invoked word
: ,word ( S -- )
   ."dw" alter show cr ;

\ compile reference to nest primitive
: ,nest ( -- )
    ."call" ."nest" cr ;

\ compile reference to unnest primitive
: ,unnest ( -- )
    ."dw" ."unnest" cr cr ;

\ compile signed number
: ,n ( n -- )
    ."dw" . cr ;

\ compile unsigned number
: ,u ( u -- )
    ."dw" u. cr ;

\ compile literal
: ,_lit ( S -- )
    ."dw" ."lit" cr  ,word ;

\ compile literal
: ,lit ( x -- )
    ."dw" ."lit" cr  ,n ;

\ output string as comment
: ,comment ( S -- )
    tab ';' emit space show cr ;

\ create a new symbolic label
\ if label is 6 characters or less, stay on same line for following code
: label ( S -- )
    alter dup >r show ':' emit r> 7 - 0< ?exit cr ;

\ body calculates the name of the body from a token
: body ( S1 -- S2 )
   'X' swap 1+ ;

\ ,codefield compiles the code field of primitive
\ for z80, for asm words there is only a body, so omit the body label
\ : ,codefield ( S -- )
\    \ body _dup ,word label ;
\    body label ;

: ,code ( S -- )
    _dup label
    ; \ ,codefield ;

: ,end-code ( -- )
  cr ;

\ -----------------------------------
\ tail call optimization    tail word ;  ->  [ ' word >body ] literal >r ;

: bodylabel ( S --  )
   body label ;

\ ,tail compiles a tail call
: ,tail  ( S -- )
   body ,_lit
   '>' 'r' 2 ,word ;

\ : ."done" ( -- )
\     ';' emit space 'd' emit 'o' emit 'n' emit 'e' emit ;
\
\ : ."last:" ( -- )
\     ';' emit space 'l' emit 'a' emit 's' emit 't' emit ':' emit space ;

: ,end ( S -- )
    \ cr ."last:" alter show
    \ cr ."done" cr
    ;

\ \ create a new header with given name S2 and flags - do nothing
\ : header ( S1 S2 flags -- S3 S2 )
\    drop ;

